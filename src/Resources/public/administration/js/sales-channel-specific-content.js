!function(){"use strict";var e={};e.p="bundles/saleschannelspecificcontent/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/saleschannelspecificcontent/"),function(){let{Component:e,Mixin:t}=Shopware;e.override("sw-product-detail",{template:"{% block sw_product_detail_content_tabs_reviews %}\n       {% parent %}\n    <sw-tabs-item :route=\"{ name: 'sw.product.detail.content', params: { id: $route.params.id } }\">\n        Content\n    </sw-tabs-item>\n{% endblock %}\n",metaInfo(){return{title:"Custom"}}});let{Component:n,Mixin:a}=Shopware;n.getComponentRegistry().has("sw-product-detail-content")||n.register("sw-product-detail-content",{template:'<sw-card title="Select Sales Channel">\n    <template #default>\n        <sw-entity-single-select\n            v-model:value="selectedSalesChannel"\n            entity="sales_channel"\n            label="Select Sales Channel"\n            placeholder="Choose a sales channel..."\n            :criteria="criteria"\n            :repository="salesChannelRepository"\n            valueProperty="id"\n            labelProperty="name"\n            allow-clearable\n            @change="onSalesChannelChange"\n        />\n    </template>\n</sw-card>\n\n<sw-card title="Long Description">\n    <template #default>\n        <sw-text-editor \n            label="Long Description" \n            v-model:value="salesChannelSpecificContent.longDescription" \n            :enablehtml="true"\n            :sanitize-input="false"\n            >\n        </sw-text-editor>\n        <sw-text-editor \n            label="Short Description" \n            v-model:value="salesChannelSpecificContent.shortDescription" \n            placeholder="Enter short description">\n        </sw-text-editor>\n    </template>\n</sw-card>\n\n<sw-card title="Product Details">\n    <template #default>\n        <sw-container columns="2">\n            <sw-text-field \n                label="Product Name" \n                v-model:value="salesChannelSpecificContent.productName" \n                placeholder="Enter product name"\n            />\n\n            <sw-text-field \n                label="Product URL" \n                v-model:value="salesChannelSpecificContent.productUrl" \n                placeholder="Enter product URL"\n            />\n        </sw-container>\n    </template>\n</sw-card>\n\n<sw-card title="SEO Information">\n    <template #default>\n        <sw-container columns="2">\n            <sw-text-field \n                label="SEO Title" \n                v-model:value="salesChannelSpecificContent.metaTitle" \n                placeholder="Enter meta title"\n            />\n\n            <sw-text-field \n                label="SEO Keywords" \n                v-model:value="salesChannelSpecificContent.metaKeywords" \n                placeholder="Enter meta keywords"\n            />\n            <sw-text-editor \n                label="SEO Description" \n                v-model:value="salesChannelSpecificContent.metaDescription" \n                :enablehtml="true"\n                />\n        </sw-container>\n    </template>\n</sw-card>\n\n        <sw-card title="Additional Information">\n            <template #default>\n                <sw-text-editor \n                    label="What\'s Included" \n                    v-model:value="salesChannelSpecificContent.whatsIncluded" \n                    placeholder="List included items"\n                    :enablehtml="true"\n                    :sanitize-input="false"\n                >\n                </sw-text-editor>\n\n                <sw-text-editor \n                    v-model:value="salesChannelSpecificContent.productFeatures" \n                    label="Product Features"\n                    placeholder="Add product features...">\n                </sw-text-editor>\n            </template>\n        </sw-card>\n        <sw-card title="wholesale & retail Price\'s">\n            <template #default>\n                <sw-number-field\n                        v-model:value="salesChannelSpecificContent.wholesalePrice"\n                        label="Wholesale Price"\n                        :min="0.01"\n                        step="0.01"\n                    />\n\n                    <sw-number-field\n                        v-model:value="salesChannelSpecificContent.retailPrice"\n                        label="Retail Price"\n                        :min="0.01"\n                        step="0.01"\n                    />\n            </template>\n        </sw-card>\n{# <sw-card title="Media">\n    <template #default>\n        <sw-media-field \n            label="Cover Image" \n            v-model:value="salesChannelSpecificContent.coverImageId">\n        </sw-media-field>\n\n        <sw-container columns="2fr auto">\n 	 <sw-media-upload-v2\n            v-model="salesChannelImages"\n            label="Upload Images"\n            :variant="\'regular\'"\n            :allow-multi-select="true"\n            :media-items.sync="salesChannelImages"\n        />\n\n          <sw-media-modal-v2\n            v-if="showMediaModal"\n            :initial-folder-id="mediaDefaultFolderId"\n            :entity-context="product.getEntityName()"\n            @media-modal-selection-change="onAddMedia"\n            @modal-close="onCloseMediaModal"\n        />\n        </sw-container>\n    </template>\n</sw-card> #}\n\n<sw-card title="Actions">\n    <template #footer>\n        <sw-button \n            variant="primary" \n            :isloading="isLoading" \n            @click="saveSalesChannelContent">\n            Save\n        </sw-button>\n    </template>\n</sw-card>\n',inject:["repositoryFactory"],mixins:[a.getByName("notification")],props:{product:{type:Object,required:!0}},data(){return{salesChannelSpecificContent:{id:null,longDescription:"",metaDescription:"",metaTitle:"",metaKeywords:"",productName:"",productFeatures:"",shortDescription:"",productUrl:"",whatsIncluded:"",wholesalePrice:0,retailPrice:0,coverImageId:null,salesChannelId:null},salesChannelImages:[],selectedSalesChannel:null,salesChannelData:[],isLoading:!1,salesChannelRepository:this.repositoryFactory.create("sales_channel"),productRepository:this.repositoryFactory.create("product"),salesChannelContentRepository:this.repositoryFactory.create("sales_channel_specific_content"),salesChannelImagesRepository:this.repositoryFactory.create("sales_channel_specific_images"),criteria:this.createCriteria()}},watch:{salesChannelImages(e){console.log("\uD83D\uDCF8 Images Selected:",e)},selectedSalesChannel(e){e&&this.fetchSalesChannelContent(e)}},methods:{getProductIdFromRoute(){return this.$route.params.id},async fetchSalesChannelContent(e=null){let t=this.getProductIdFromRoute();if(!t){this.createNotificationError({title:"Error",message:"Product ID not found in URL!"});return}this.isLoading=!0;try{let n=new Shopware.Data.Criteria;n.addFilter(Shopware.Data.Criteria.equals("productId",t)),n.addFilter(Shopware.Data.Criteria.equals("salesChannelId",e||this.selectedSalesChannel));let a=await this.salesChannelContentRepository.search(n,Shopware.Context.api);if(a.length>0){let e=a[0];this.salesChannelSpecificContent={...e,productFeatures:"string"==typeof e.productFeatures?e.productFeatures:""};let t=new Shopware.Data.Criteria;t.addFilter(Shopware.Data.Criteria.equals("SalesChannelContentId",e.id)),this.salesChannelImages=await this.salesChannelImagesRepository.search(t,Shopware.Context.api)}else this.salesChannelSpecificContent=this.getEmptyContent(e),this.salesChannelImages=[]}catch(e){this.createNotificationError({title:"Error",message:"Failed to fetch sales channel content."})}finally{this.isLoading=!1}},async saveSalesChannelContent(){let e=this.getProductIdFromRoute();if(!e){this.createNotificationError({title:"Error",message:"Product ID not found in URL!"});return}if(!this.selectedSalesChannel){this.createNotificationError({title:"Error",message:"Please select a Sales Channel before saving."});return}this.isLoading=!0;try{let t;this.salesChannelSpecificContent.id?(t=await this.salesChannelContentRepository.get(this.salesChannelSpecificContent.id,Shopware.Context.api),Object.assign(t,this.salesChannelSpecificContent)):(t=this.salesChannelContentRepository.create(Shopware.Context.api),Object.assign(t,{...this.salesChannelSpecificContent,id:Shopware.Utils.createId(),productId:e,salesChannelId:this.selectedSalesChannel})),await this.salesChannelContentRepository.save(t,Shopware.Context.api);let n=await this.salesChannelContentRepository.get(t.id,Shopware.Context.api);this.salesChannelSpecificContent=n,console.log("✅ Images to be saved:",this.salesChannelImages),await Promise.all(this.salesChannelImages.map(async(e,n)=>{let a;if(!e.mediaId){console.error("❌ Missing mediaId for image:",e);return}e.id?(console.log("\uD83D\uDD04 Updating existing image:",e),a=await this.salesChannelImagesRepository.get(e.id,Shopware.Context.api)):(console.log("➕ Creating new image:",e),a=this.salesChannelImagesRepository.create(Shopware.Context.api)),Object.assign(a,{mediaId:e.mediaId,SalesChannelContentId:t.id,position:n}),await this.salesChannelImagesRepository.save(a,Shopware.Context.api)})),this.createNotificationSuccess({title:"Success",message:"Sales channel content and images saved successfully!"})}catch(e){console.error("❌ Error saving sales channel content:",e),this.createNotificationError({title:"Error",message:"Failed to save sales channel content."})}finally{this.isLoading=!1}},updateSalesChannelContent(){let e=this.salesChannelData.find(e=>String(e.salesChannelId)===String(this.selectedSalesChannel));e?this.salesChannelSpecificContent={...e,productFeatures:"string"==typeof filteredData.productFeatures?filteredData.productFeatures:""}:this.salesChannelSpecificContent=this.getEmptyContent(this.selectedSalesChannel)},createCriteria(){let e=new Shopware.Data.Criteria;return e.addFilter(Shopware.Data.Criteria.equals("active",!0)),e.addSorting(Shopware.Data.Criteria.sort("name","ASC")),e},onSalesChannelChange(e){console.log("\uD83D\uDCCC Sales Channel Selected:",e),this.selectedSalesChannel=e,this.salesChannelSpecificContent.salesChannelId=e,this.salesChannelSpecificContent.id=e,e?(console.log("Fetching content for Sales Channel ID:",e),this.fetchSalesChannelContent(e)):this.salesChannelSpecificContent={}},getEmptyContent(e=null){return{id:null,productId:null,salesChannelId:e,longDescription:"",metaDescription:"",metaTitle:"",metaKeywords:"",shortDescription:"",productName:"",productFeatures:"",whatsIncluded:"",wholesalePrice:0,retailPrice:0,coverImageId:null,salesChannelSpecificImages:[]}}},created(){this.fetchSalesChannelContent()}});let{Module:l}=Shopware;l.register("multichannel-content",{type:"plugin",name:"multichannel-content",title:"multichannel-content.general.title",description:"multichannel-content.general.description",routes:{list:{component:"sw-product-detail",path:"list"}}}),Shopware.Module.register("sw-product-detail-content-tab",{routeMiddleware(e,t){"sw.product.detail"===t.name&&t.children.every(e=>"sw.product.detail.content"!==e.name)&&t.children.push({name:"sw.product.detail.content",path:"/sw/product/detail/:id/content",component:"sw-product-detail-content",meta:{parentPath:"sw.product.index"}}),e(t)}})}()}();